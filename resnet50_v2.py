# -*- coding: utf-8 -*-
"""vgg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10JAs0ZWyaR58kX29P8pg88aV9Ja4DlkB
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive/"

!ls "/content/drive/MyDrive/MLFPGA/MLFPGA_Proj/DATA"

import tensorflow as tf 
from tensorflow.keras.applications import ResNet50V2
import numpy as np
from sklearn.model_selection import train_test_split

input_shape = (224,224,3)
classes = 2
classifier_activation='softmax'
learning_rate = 0.0001
batch_size = 8
epochs = 50
DESTINATION = "/content/drive/MyDrive/MLFPGA/MLFPGA_Proj/DATA/OUTPUT_DIR/"

train_image_path = DESTINATION + "/New_train_images.npy"   
train_labels_path = DESTINATION + "/New_train_labels.npy"   
test_image_path = DESTINATION + "/New_test_images.npy"
test_labels_path = DESTINATION + "/New_test_labels.npy"
x_train = np.load(train_image_path)
y_train = np.load(train_labels_path)
x_test = np.load(test_image_path)
y_test = np.load(test_labels_path)

base_model = ResNet50V2(weights = None, include_top = False, input_shape = input_shape)
x = base_model.output         
x = tf.keras.layers.GlobalAveragePooling2D()(x)
output = tf.keras.layers.Dense(classes, activation=classifier_activation)(x)

model = tf.keras.Model(inputs = base_model.input, outputs = output)

optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate, beta_1=0.9, beta_2=0.999, epsilon=1e-07)

model.compile(optimizer = optimizer,
                loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                metrics = ['accuracy'])
    


X_train_train, X_train_val, y_train_train, y_train_val = train_test_split(x_train, y_train, test_size=0.20, random_state=1)

print(f"Sizes: {X_train_train.shape}, {X_train_val.shape}")

results = model.fit(X_train_train, y_train_train, epochs = epochs,
                    validation_data = (X_train_val, y_train_val), 
                    batch_size=batch_size, 
                    callbacks = None
                    )

#losses = pd.DataFrame(model.history.history)
#losses[['loss','val_loss']].plot()

save_model = "/content/drive/MyDrive/MLFPGA/MLFPGA_Proj/model_test/"
model.save(save_model)

save_model = save_model + 'resnet50_v2.h5'
model.save(save_model)

# Evaluate model
resnet50_v2_path='/content/drive/MyDrive/MLFPGA/MLFPGA_Proj/model_test/vgg19.h5'
resnet50_v2_model = tf.keras.models.load_model(resnet50_v2_path)
model_eval = resnet50_v2_model.evaluate(x_test, y_test)

print(model_eval)

print(x_test.shape)

